#!/bin/bash
#
# Nix multi-user-mode installation script for CentOS 6.5
# Copyright (C) 2014 Andreas J. Herrmann
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


## Config #################################################
VERBOSE=true  # Set to true for verbose output
FORCE=false  # Set to true to omit confirmation questions
INSTALL_LOG=nix_multi_user_install.log  # Write install log here.
BASH_STATIC_NAR=  # Check for bash_static closure here.
NIX_BUILD_CORES=1  # Parallelize builds to that number. (Will be stored)
NIX_MAX_JOBS=1  # Run max. this many jobs at a time. (Will be stored)

## Tools ##################################################
logfile="$(readlink -f .)/$INSTALL_LOG"

ts() {
  date '+%F_%R:%S.%N'
}

info() {
  if [ "$VERBOSE" = true ]; then
    echo "INFO: $*"
  fi
  echo "$(ts) INFO: $*" >> ${logfile}
}

warning() {
  echo "WARNING: $*" >&2
  echo "$(ts) WARNING: $*" >> ${logfile}
}

error() {
  echo "error: $*" >&2
  echo "$(ts) ERROR: $*" >> ${logfile}
  exit 1
}

confirm() {
  local choice
  if [ "$FORCE" != true ]; then
    echo "$*" >&2
    echo "$(ts) PROMPT: $*" >> ${logfile}
    while true; do
      read -p 'Yes|No|Abort: ' -n 1 choice >&2
      case "$choice" in
        y|Y )
          echo ' continuing...' >&2
          echo "$(ts) CONTINUE" >> ${logfile}
          return 0
          ;;
        n|N )
          echo ' skipping...' >&2
          echo "$(ts) SKIP" >> ${logfile}
          return 1
          ;;
        a|A )
          echo ' aborting!!!' >&2
          echo "$(ts) ABORT" >> ${logfile}
          exit 1
          ;;
        * )
          echo ' invalid input' >&2
          ;;
      esac
    done
  fi
}

## Obtain Nix Build #######################################
system="x86_64-linux"
nixver="1.10"
tarball="nix-${nixver}-${system}.tar.bz2"
url="https://nixos.org/releases/nix/nix-${nixver}/${tarball}"
unpack="nix-binary-tarball-unpack"

build_exists() {
  [ -d "$unpack" ]
}
obtain_build() {
  if ! type -p curl > /dev/null; then
    error "You do not have \`curl' installed," \
      "which I need to download the binary tarball"
  fi

  info "Downloading Nix binary tarball for $system from \`$url'..."
  if ! curl -L -o "$tarball" "$url"; then
      error "Failed to download \`$url'"
  fi

  info "unpacking binary tarball..."
  rm -rf "$unpack"
  mkdir "$unpack"
  tar xf "$tarball" -C "$unpack"
}

remove_build() {
  if confirm "Remove temporaries?"; then
    rm -rf "$unpack" "$tarball"
  fi
}

msg="A Nix-distribution exists already. Overwrite?"
if ! build_exists || confirm "$msg"; then
  obtain_build
fi


## Check & Configure Installer ############################
# Extract nix path from official install script
find_nix_path() {
  local nix
  nix="$(head -10 ${unpack}/*/install | sed -rne 's/nix="([^"]+)"/\1/p')"
  if [ -z "$nix" ]; then
    error "Could not read path of nix derivation"
  fi
  echo "$nix"
}

do_checks() {
  if ! [ -e ${unpack}/*/.reginfo ]; then
    error "Incomplete installer (.reginfo is missing)"
  fi

  if [ "$(id -u)" -ne 0 ]; then
    error "Need to be root user"
  fi

  if [ -e /etc/nix/nix.conf ]; then
    local tmp="$(mktemp /etc/nix/nix.conf.XXXXXXXX)"
    info "Found \`/etc/nix/nix.conf'. Moving it to \`$tmp'..."
    if confirm "Restore \`/etc/nix/nix.conf' after installation?"; then
      oldnixconf="$tmp"
    else
      oldnixconf=
    fi
    mv /etc/nix/nix.conf "$tmp"
  fi
}

dest="/nix"
nix="$(find_nix_path)"
buildgroup="nixbld"
buildgid=30000
builduser_="nixbld"
builduid=30000
builduserhome="/var/nothing"
buildusershell="/sbin/nologin"
numbuildusers=10
nixusergroup="nixusers"
with_chroot_builds=1

do_checks


## Install Nix Store ######################################
user_exists() {
  # Check if user of given name exists.
  local user="$1"
  getent passwd | egrep -q "^$user:"
}
uid_exists() {
  # Check if user of given uid exists.
  local uid="$1"
  getent passwd | egrep -q "^([^:]*:){2}$uid:"
}
group_exists() {
  # Check if group of given name exists.
  local group="$1"
  getent group | egrep -q "^$group:"
}
gid_exists() {
  # Check if group of given gid exists.
  local gid="$1"
  getent group | egrep -q "^([^:]*:){2}$gid:"
}
create_users() {
  if [ -n "$nixusergroup" ]; then
    info "Checking for nix-user group..."
    msg="The nix-user group \`$nixusergroup' does not exist. Create it?"
    if ! group_exists "$nixusergroup" && confirm "$msg"; then
      info "Creating group \`$nixusergroup'..."
      groupadd $nixusergroup
    fi
  fi

  local exists=
  info "Creating build group and users..."

  # Do checks
  if group_exists "$buildgroup" || gid_exists "$buildgid"; then
    warning "Group \`$buildgroup', or gid \`$buildgid' exists already."
    exists=1
  fi
  for i in $(seq 1 $numbuildusers); do
    local user=$builduser_$i uid=$(expr $builduid + $i)
    if user_exists "$user" || uid_exists "$uid"; then
      warning "User \`$user', or uid \`$uid' exists already."
      exists=1
    fi
  done
  if [ -e "$builduserhome" ]; then
    warning "The build-user home \`$builduserhome' exists."
    exists=1
  fi
  if [ ! -x "$buildusershell" ]; then
    warning "The build-user shell \`$buildusershell' does not exist."
    exists=1
  fi
  if [ -n "$exists" ] && ! confirm "Create group and users anyway?"; then
    return
  fi

  # Create group and users
  info "Adding group \`$buildgroup' with gid \`$buildgid'."
  groupadd -g $buildgid $buildgroup
  for i in $(seq 1 $numbuildusers); do
    local user=$builduser_$i uid=$(expr $builduid + $i)
    info "Adding user \`$user' with uid \`$uid'."
    useradd -M -N -r -u $uid \
      -g $buildgroup -G $buildgroup -c "Nix build user $i" \
      -d /var/empty -s /bin/false $user
  done
}

install_nix_files() {
  local srcstore=$(echo $unpack/*/store)
  info "Installing the Nix store..."
  if ! [ -e "$dest" ] || confirm "Directory \`$dest' exists! Overwrite?"; then
    rm -rf "$dest"
    info "Creating \`$dest/store'."
    mkdir -p "$dest/store"
    info "Copying items into \`$dest/store'."
    info $srcstore
    for f in $srcstore/*; do
      i="${f#$srcstore/}"
      i_tmp="$dest/store/$i.$$"
      # Copy items and make sure to not leave any in a partial state.
      if [ -e "$i_tmp" ]; then
        rm -rf "$i_tmp"
      fi
      if ! [ -e "$dest/store/$i" ]; then
        cp -Rp "$srcstore/$i" "$i_tmp"
        mv "$i_tmp" "$dest/store/$i"
      fi
    done
  fi
  info "Adjusting permissions of \`$dest/store'..."
  chgrp -R $buildgroup "$dest/store"
  chmod 1775 "$dest/store"
  info "Creating user profile and gc-root base directory."
  mkdir -p "$dest/var/nix/profiles/per-user"
  mkdir -p "$dest/var/nix/gcroots/per-user"
  chmod 1777 "$dest/var/nix/profiles/per-user"
  chmod 1777 "$dest/var/nix/gcroots/per-user"
}

init_store_db() {
  info "Initializing Nix database..."
  if ! $nix/bin/nix-store --init; then
    error "Failed to initialize database."
  fi
  if ! $nix/bin/nix-store --load-db < $unpack/*/.reginfo; then
    error "Unable to register valid paths."
  fi
}

init_root_profile() {
  info "Configuring root user profile \`~/.nix-profile'."

  local prof="$dest/var/nix/profiles/default"
  ln -s "$prof" "$HOME/.nix-profile"

  if ! "$nix/bin/nix-env" -i "$nix"; then
    error "Unable to install Nix into default profile."
  fi

  if ! "$nix/bin/nix-channel" --list | grep -q "^nixpkgs "; then
    "$nix/bin/nix-channel" --add http://nixos.org/channels/nixpkgs-unstable
  fi
  "$nix/bin/nix-channel" --update nixpkgs
  export NIX_PATH="nixpkgs=$HOME/.nix-defexpr/channels/nixpkgs"

  # Set environment variables.
  local prof="$HOME/.nix-profile"
  export PATH="$prof/bin:$PATH"
  if env | grep -q MANPATH; then
    # If MANPATH is not set, man will automatically find man-pages
    # through PATH.
    export MANPATH="$prof/share/man:$MANPATH"
  fi
}

install_user_profile() {
  local script=/etc/profile.d/nix.sh
  if ! [ -e "$script" ] || confirm "Overwrite \`$script'?"; then
    info "Installing \`$script'."
    cat > "$script" << EOF
#!/bin/sh
install-nix() {
  # Install Nix for the current user.
  if [ "\$USER" = root ]; then
    echo "This is not intended for root." >&2
    return 1
  else
    # Create user profile and gc-roots.
    local prof="$dest/var/nix/profiles/per-user/\$USER"
    local gc="$dest/var/nix/gcroots/per-user/\$USER"
    mkdir -m 0775 -p "\$prof"
    mkdir -m 0775 -p "\$gc"
    if [ "\$(stat --printf '%u' \$prof)" != "\$(id -u)" ]; then
      echo "warning: Bad ownership on \\\`\$prof'." >&2
    fi
    if [ "\$(stat --printf '%u' \$gc)" != "\$(id -u)" ]; then
      echo "warning: Bad ownership on \\\`\$gc'." >&2
    fi
    # Create nix-profile in home dir.
    rm -f "\$HOME/.nix-profile"
    ln -s "\$prof/profile" "\$HOME/.nix-profile"
    echo "http://nixos.org/channels/nixpkgs-unstable nixpkgs" \\
      >> "\$HOME/.nix-channels"
    mkdir -p "\$HOME/.nix-defexpr"
    rm -f "\$HOME/.nix-defexpr/channels_root"
    ln -s "$dest/var/nix/profiles/per-user/root/channels" \\
      "\$HOME/.nix-defexpr/channels_root"
  fi
  echo "Installed Nix for you. To activate call \\\`nix'."

  unset -f install-nix
}

nix() {
  if [ ! -L "\$HOME/.nix-profile" ]; then
    echo "Nix does not seem to be installed for you, yet." >&2
    echo "Execute \\\`install-nix' first." >&2
    return 1
  fi
  # Note: The order matters!
  # The user-profile should shadow the system profile.
  local -a profs=("$dest/var/nix/profiles/default" "\$HOME/.nix-profile")
  # Activate Nix for current user.
  for i in \${profs[@]}; do
    export PATH="\$i/bin:\$PATH"
    if env | grep -q MANPATH; then
      # If MANPATH is not set, man will automatically find man-pages
      # through PATH.
      export MANPATH="\$i/share/man:\$MANPATH"
    fi
    local nixpath
    if [ "\$USER" == root ]; then
      nixpath="nixpkgs=\$HOME/.nix-defexpr/channels/nixpkgs"
    else
      nixpath="nixpkgs=\$HOME/.nix-defexpr/channels_root/nixpkgs"
    fi
    export NIX_PATH="\${NIX_PATH:-\$nixpath}"
  done
  # Daemon mode?
  socket=$dest/var/nix/daemon-socket/socket
  if [ -S "\$socket" ]; then
    export NIX_REMOTE=daemon
  else
    export NIX_REMOTE=
  fi

  unset -f install-nix
  unset -f nix
}
EOF
  fi
}

install_daemon() {
  local script="/etc/init.d/nix-daemon"

  info "Installing nix-daemon-wrapper"
  mkdir -p "$dest/local/bin"
  cat <<EOF >"$dest/local/bin/nix-daemon-wrapper"
#!/bin/sh
logfile="\$1"
pidfile="\$2"
mkdir -p \`dirname \$logfile\`
mkdir -p \`dirname \$pidfile\`
/root/.nix-profile/bin/nix-daemon >"\$logfile" 2>&1 <&- &
echo \$! > "\$pidfile"
EOF
  chmod +x "$dest/local/bin/nix-daemon-wrapper"

  if ! [ -e "$script" ] || confirm "Overwrite \`$script'?"; then
    info "Installing daemon init-script: \`$script'."
    cat > "$script" << EOF
#!/bin/bash
#
#       /etc/rc.d/init.d/nix-daemon
#
#       Nix-daemon runs nixblds to build nix-store items.
#
# chkconfig: 2345 60 40
# description: Nix-daemon runs nixblds to build nix-store items.
# processname: nix-daemon
# config: /etc/nix/nix.conf

# Source function library.
. /etc/init.d/functions

nixusergroup=$nixusergroup  # Not empty => Members only access to nix-daemon
LOCKFILE=/var/lock/subsys/nix-daemon
PIDFILE=$dest/var/nix/daemon.pid
LOGFILE=$dest/var/log/daemon.log
prog=nix-daemon
exec=$dest/local/bin/nix-daemon-wrapper
socket=$dest/var/nix/daemon-socket

start() {
        echo -n "Starting the Nix daemon: "
        daemon --pidfile "\$PIDFILE" "\$exec" "\$LOGFILE" "\$PIDFILE"
        RETVAL=\$?
        echo
        [ \$RETVAL -eq 0 ] && touch "\$LOCKFILE"
        if [ -n "\$nixusergroup" ]; then
          mkdir -p "\$socket"
          chgrp "\$nixusergroup" "\$socket"
          chmod 0770 "\$socket"
        fi
        return \$RETVAL
}

stop() {
        echo -n "Shutting down nix-daemon: "
        killproc -p "\$PIDFILE" -d 10 "\$prog"
        RETVAL=\$?
        echo
        [ \$RETVAL -eq 0 ] && rm -f "\$LOCKFILE"
        return \$RETVAL
}

rhstatus() {
        status -p "\$PIDFILE" -l "\$LOCKFILE" "\$prog"
}

case "\$1" in
    start)
        if rhstatus >/dev/null 2>&1; then
            echo "error: \$prog already running." >&2
            exit 1
        else
            start
        fi
        ;;
    stop)
        stop
        ;;
    status)
        rhstatus
        ;;
    restart)
        stop
        start
        ;;
    reload)
        stop
        start
        ;;
    condrestart)
        rhstatus >/dev/null 2>&1 || exit 0
        stop
        start
        ;;
    *)
        echo "Usage: nix-daemon {start|stop|status|reload|restart}"
        exit 1
        ;;
esac
exit \$?
EOF
  fi
  chmod +x "$script"

  info "Adding daemon to run-levels."
  chkconfig --add nix-daemon
}

configure_nix() {
  local conf="/etc/nix/nix.conf"
  mkdir -p /etc/nix
  if ! [ -e "$conf" ] || confirm "Overwrite \`$conf'?"; then
    rm -f /etc/nix/nix.conf
    echo "build-users-group = $buildgroup" > /etc/nix/nix.conf
    echo "build-max-jobs = $NIX_MAX_JOBS" >> /etc/nix/nix.conf
    echo "build-cores = $NIX_BUILD_CORES" >> /etc/nix/nix.conf
  fi
}

install_chroot() {
  info "Installing chroot builds"

  if [ -n "$BASH_STATIC_NAR" ]; then
    if [ ! -f "$BASH_STATIC_NAR" ]; then
      # Give user opportunity to fix missing file issue.
      confirm "Bash static closure not found at $BASH_STATIC_NAR. Continue?"
    fi
    if [ -f "$BASH_STATIC_NAR" ]; then
      # Override the daemon to avoid signature issues.
      info "Importing static-bash from closure \`$BASH_STATIC_NAR'"
      "$nix/bin/nix-store" --import < "$BASH_STATIC_NAR"
    fi
  fi

  mkdir -p "${dest}/chroot_builds"
  cat << EOF > "${dest}/chroot_builds/static_bash.nix"
with import <nixpkgs> {};
stdenv.lib.overrideDerivation bash (args: {
  configureFlags = [ args.configureFlags ]
    ++ [ "--enable-static-link" "--without-bash-malloc" "--disable-nls" ];
})
EOF
  local bash="${dest}/chroot_builds/static_bash"
  if ! "$nix/bin/nix-build" -o "$bash" "${dest}/chroot_builds/static_bash.nix"; then
    error "Failed to build static bash required for chroot builds."
  fi
  mkdir -p /etc/nix/
  echo "build-use-chroot = true" \
    >> /etc/nix/nix.conf
  echo "build-chroot-dirs = /dev /dev/pts /bin=${bash}/bin" \
    >> /etc/nix/nix.conf
}

restore_config() {
  if [ -n "$oldnixconf" ]; then
    info "Restoring \`/etc/nix/nix.conf'."
    mv "$oldnixconf" /etc/nix/nix.conf
  fi
}

start_deamon() {
  /etc/init.d/nix-daemon start
  export NIX_REMOTE=daemon
}

final_message() {
  info "Nix was succesfully installed."
  info "To activate Nix in future session execute \`nix'.'"
  info "Normal users should execute \`install-nix' to install Nix,"
  info "  and \`nix' to activate it."
}

unset NIX_REMOTE
create_users
install_nix_files
init_store_db
init_root_profile
install_user_profile
install_daemon
configure_nix
if [ -n "$with_chroot_builds" ]; then
  install_chroot
fi
restore_config
start_deamon
final_message

## Cleanup ################################################
remove_build
